#!/usr/bin/env python
"""
Script para ejecutar el servidor ASGI con Channels en producci√≥n
Soluciona los problemas de importaci√≥n temprana y configuraci√≥n de Django
"""
import os
import sys
import argparse
from server_config import get_config
from network_utils import get_local_ip, print_network_info, get_network_interfaces_summary, find_available_port

def main():
    """Ejecutar el servidor ASGI con configuraci√≥n correcta"""
    # Configurar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(description='Servidor de producci√≥n Django ASGI')
    parser.add_argument('--network', action='store_true', 
                       help='Permitir conexiones desde la red local (detecta IP autom√°ticamente)')
    parser.add_argument('--localhost', action='store_true', 
                       help='Solo permitir conexiones locales (127.0.0.1)')
    parser.add_argument('--port', type=int, default=8000, 
                       help='Puerto del servidor (default: 8000)')
    parser.add_argument('--show-interfaces', action='store_true',
                       help='Mostrar todas las interfaces de red disponibles')
    
    args = parser.parse_args()
    
    # Configurar Django settings ANTES de cualquier importaci√≥n
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rpgestor20.settings')
    
    # Mostrar interfaces si se solicita
    if args.show_interfaces:
        get_network_interfaces_summary()
        return
    
    try:
        from uvicorn import run
        
        # Determinar host
        if args.localhost:
            host = "127.0.0.1"
        elif args.network:
            host = "0.0.0.0"  # Permite conexiones desde cualquier IP
        else:
            # Por defecto, preguntar al usuario
            local_ip = get_local_ip()
            print("üöÄ CONFIGURACI√ìN DEL SERVIDOR DE PRODUCCI√ìN")
            print("=" * 50)
            print(f"üñ•Ô∏è  IP local detectada: {local_ip}")
            print()
            print("¬øC√≥mo quieres ejecutar el servidor?")
            print("1. üè† Solo en esta computadora (localhost)")
            print("2. üåê Accesible desde la red local")
            print("3. üìã Mostrar todas las interfaces de red")
            
            while True:
                choice = input("\nElige una opci√≥n (1/2/3): ").strip()
                if choice == "1":
                    host = "127.0.0.1"
                    break
                elif choice == "2":
                    host = "0.0.0.0"
                    break
                elif choice == "3":
                    get_network_interfaces_summary()
                    continue
                else:
                    print("‚ùå Opci√≥n inv√°lida. Elige 1, 2 o 3.")
        
        # Verificar si el puerto est√° disponible
        port = args.port
        if not find_available_port(host if host != "0.0.0.0" else "127.0.0.1", port, 1):
            print(f"‚ö†Ô∏è  Puerto {port} no disponible, buscando alternativo...")
            alternative_port = find_available_port(host if host != "0.0.0.0" else "127.0.0.1", port + 1)
            if alternative_port:
                port = alternative_port
                print(f"‚úÖ Usando puerto alternativo: {port}")
            else:
                print("‚ùå No se encontr√≥ un puerto disponible")
                sys.exit(1)
        
        # Obtener configuraci√≥n de producci√≥n y actualizarla
        config = get_config('production')
        config['host'] = host
        config['port'] = port
        
        print("\nüöÄ Iniciando servidor ASGI de PRODUCCI√ìN...")
        print_network_info(host, port)
        
        # Ejecutar servidor con configuraci√≥n de producci√≥n
        run(**config)
        
    except ImportError as exc:
        print("‚ùå Error: No se pudo importar uvicorn.")
        print("üí° Instala uvicorn con: pip install uvicorn")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã Servidor detenido por el usuario")
        sys.exit(0)
    except Exception as exc:
        print(f"‚ùå Error al iniciar el servidor: {exc}")
        sys.exit(1)

if __name__ == "__main__":
    main()
